{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "      number <- number/10",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/100",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number*10",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (append_GP) {",
        "+ ",
        "    gp_conversion <- paste(number,\"gp\", sep =\" \")",
        "+ ",
        "  } else {",
        "+ ",
        "    gp_conversion <- number",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "seed <- Sys.time()",
        "> ",
        "",
        "> ",
        "Ancestries <- tibble(read.csv(\"Ancestries.csv\")) %>% filter(Level.0.Character.Override != \"Unavailable\")",
        "> ",
        "Backgrounds <- tibble(read.csv(\"Backgrounds.csv\")) %>% filter(RarityOverride != \"Unavailable\")",
        "> ",
        "simpleWeapons <- tibble(read.csv(\"simple_weapons.csv\")) %>% filter(Available == \"TRUE\")",
        "> ",
        "adventuringGear <- tibble(read.csv(\"adventuring_gear.csv\")) %>% filter(Available == \"TRUE\") %>% mutate(Bulk = replace(Bulk, Bulk == \"\",0)) %>% mutate(Bulk = replace(Bulk, Bulk == \"L\",0)) %>% mutate(Bulk = as.integer(Bulk))",
        "> ",
        "if (weapon$Bulk !='L') {",
        "+ ",
        "  currentBulk <- weapon$Bulk",
        "+ ",
        "} else {",
        "+ ",
        "  currentBulk <- 0",
        "+ ",
        "}",
        "> ",
        "maxBulk <- Bonus$Strength + 5",
        "> ",
        "",
        "> ",
        "goldRemaining <- 5",
        "> ",
        "",
        "> ",
        "if (weapon$Price != \"\") {",
        "+ ",
        "  goldRemaining <- 5 - gp_conversion(weapon$Price)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "equipment <- sample_n(adventuringGear, 1)",
        "> ",
        "i <- 0",
        "> ",
        "repeat {",
        "+ ",
        "  nequip <- sample_n(adventuringGear, 1)",
        "+ ",
        "  ",
        "+ ",
        "  #gold check",
        "+ ",
        "  gp <- gp_conversion(nequip$Price)",
        "+ ",
        "  ",
        "+ ",
        "  if (goldRemaining - gp <= 0) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #bulk Check",
        "+ ",
        "  if (currentBulk - nequip$Bulk[1] <= 0) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # True up",
        "+ ",
        "  goldRemaining <- goldRemaining - gp",
        "+ ",
        "  currentBulk <- currentBulk + nequip$Bulk[1]",
        "+ ",
        "  equipment <- add_row(equipment, nequip)",
        "+ ",
        "  ",
        "+ ",
        "  if (currentBulk > maxBulk | i > 1000) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  i=i+1",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "if (weapon$Bulk !='L') {",
        "+ ",
        "  currentBulk <- weapon$Bulk",
        "+ ",
        "} else {",
        "+ ",
        "  currentBulk <- 0",
        "+ ",
        "}",
        "> ",
        "maxBulk <- Bonus$Strength + 5",
        "> ",
        "",
        "> ",
        "goldRemaining <- 5",
        "> ",
        "",
        "> ",
        "if (weapon$Price != \"\") {",
        "+ ",
        "  goldRemaining <- 5 - gp_conversion(weapon$Price)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "equipment <- sample_n(adventuringGear, 1)",
        "> ",
        "i <- 0",
        "> ",
        "repeat {",
        "+ ",
        "  nequip <- sample_n(adventuringGear, 1)",
        "+ ",
        "  ",
        "+ ",
        "  #gold check",
        "+ ",
        "  gp <- gp_conversion(nequip$Price)",
        "+ ",
        "  ",
        "+ ",
        "  if (goldRemaining - gp <= 0) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #bulk Check",
        "+ ",
        "  if (currentBulk - nequip$Bulk[1] <= 0) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # True up",
        "+ ",
        "  goldRemaining <- goldRemaining - gp",
        "+ ",
        "  currentBulk <- currentBulk + nequip$Bulk[1]",
        "+ ",
        "  equipment <- add_row(equipment, nequip)",
        "+ ",
        "  ",
        "+ ",
        "  if (currentBulk > maxBulk | i > 100) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  i=i+1",
        "+ ",
        "}",
        "Error in if (currentBulk - nequip$Bulk[1] <= 0) { : \n  missing value where TRUE/FALSE needed\n",
        "> ",
        "if (weapon$Bulk !='L') {",
        "+ ",
        "  currentBulk <- weapon$Bulk",
        "+ ",
        "} else {",
        "+ ",
        "  currentBulk <- 0",
        "+ ",
        "}",
        "> ",
        "maxBulk <- Bonus$Strength + 5",
        "> ",
        "",
        "> ",
        "goldRemaining <- 5",
        "> ",
        "",
        "> ",
        "if (weapon$Price != \"\") {",
        "+ ",
        "  goldRemaining <- 5 - gp_conversion(weapon$Price)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "equipment <- sample_n(adventuringGear, 1)",
        "> ",
        "i <- 0",
        "> ",
        "repeat {",
        "+ ",
        "  nequip <- sample_n(adventuringGear, 1)",
        "+ ",
        "  ",
        "+ ",
        "  #gold check",
        "+ ",
        "  gp <- gp_conversion(nequip$Price)",
        "+ ",
        "  ",
        "+ ",
        "  if (goldRemaining - gp <= 0) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #bulk Check",
        "+ ",
        "  if (currentBulk + nequip$Bulk[1] > maxBulk) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # True up",
        "+ ",
        "  goldRemaining <- goldRemaining - gp",
        "+ ",
        "  currentBulk <- currentBulk + nequip$Bulk[1]",
        "+ ",
        "  equipment <- add_row(equipment, nequip)",
        "+ ",
        "  ",
        "+ ",
        "  if (currentBulk > maxBulk | i > 100) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  i=i+1",
        "+ ",
        "}",
        "Error in if (goldRemaining - gp <= 0) { : \n  missing value where TRUE/FALSE needed\n",
        "> ",
        "# Modifier function",
        "> ",
        "Modifier <- function(skill) {",
        "+ ",
        "  Modifier <- floor((skill-10)/2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Currency Conversion function",
        "> ",
        "gp_conversion <- function(value, append_GP = FALSE) {",
        "+ ",
        "  if (grepl(\",\", value)) {",
        "+ ",
        "    allCurrencies <- NULL",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl(\", \", value)) {",
        "+ ",
        "      delim <- \", \"",
        "+ ",
        "    } else if (grepl(\",\", value)) {",
        "+ ",
        "      delim <- \",\"",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    allCurrencies <- strsplit(value, delim)[[1]]",
        "+ ",
        "    ",
        "+ ",
        "    number <- 0",
        "+ ",
        "    for (n in allCurrencies){",
        "+ ",
        "      m <- parse_number(n)",
        "+ ",
        "      ",
        "+ ",
        "      if (grepl('gp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m",
        "+ ",
        "      } else if (grepl('sp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/10",
        "+ ",
        "      } else if (grepl('cp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/100",
        "+ ",
        "      } else if (grepl('pp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m*10",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  } else {",
        "+ ",
        "    number <- parse_number(value)",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl('sp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/10",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/100",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number*10",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (append_GP) {",
        "+ ",
        "    gp_conversion <- paste(number,\"gp\", sep =\" \")",
        "+ ",
        "  } else {",
        "+ ",
        "    gp_conversion <- number",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "seed <- Sys.time()",
        "> ",
        "",
        "> ",
        "Ancestries <- tibble(read.csv(\"Ancestries.csv\")) %>% filter(Level.0.Character.Override != \"Unavailable\")",
        "> ",
        "Backgrounds <- tibble(read.csv(\"Backgrounds.csv\")) %>% filter(RarityOverride != \"Unavailable\")",
        "> ",
        "simpleWeapons <- tibble(read.csv(\"simple_weapons.csv\")) %>% filter(Available == \"TRUE\")",
        "> ",
        "adventuringGear <- tibble(read.csv(\"adventuring_gear.csv\")) %>% filter(Available == \"TRUE\") %>% mutate(Bulk = replace(Bulk, Bulk == \"\",0)) %>% mutate(Bulk = replace(Bulk, Bulk == \"L\",0)) %>% mutate(Bulk = as.integer(Bulk) )%>% mutate(Price = replace(Price, Price == \"\",0))",
        "> ",
        "if (weapon$Bulk !='L') {",
        "+ ",
        "  currentBulk <- weapon$Bulk",
        "+ ",
        "} else {",
        "+ ",
        "  currentBulk <- 0",
        "+ ",
        "}",
        "> ",
        "maxBulk <- Bonus$Strength + 5",
        "> ",
        "",
        "> ",
        "goldRemaining <- 5",
        "> ",
        "",
        "> ",
        "if (weapon$Price != \"\") {",
        "+ ",
        "  goldRemaining <- 5 - gp_conversion(weapon$Price)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "equipment <- sample_n(adventuringGear, 1)",
        "> ",
        "i <- 0",
        "> ",
        "repeat {",
        "+ ",
        "  nequip <- sample_n(adventuringGear, 1)",
        "+ ",
        "  ",
        "+ ",
        "  #gold check",
        "+ ",
        "  gp <- gp_conversion(nequip$Price)",
        "+ ",
        "  ",
        "+ ",
        "  if (goldRemaining - gp <= 0) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #bulk Check",
        "+ ",
        "  if (currentBulk + nequip$Bulk[1] > maxBulk) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # True up",
        "+ ",
        "  goldRemaining <- goldRemaining - gp",
        "+ ",
        "  currentBulk <- currentBulk + nequip$Bulk[1]",
        "+ ",
        "  equipment <- add_row(equipment, nequip)",
        "+ ",
        "  ",
        "+ ",
        "  if (currentBulk > maxBulk | i > 100) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  i=i+1",
        "+ ",
        "}",
        "Error in if (currentBulk + nequip$Bulk[1] > maxBulk) { : \n  missing value where TRUE/FALSE needed\n",
        "> ",
        "currentBulk + nequip$Bulk[1]",
        "[1] NA\n",
        "> ",
        "nequip$Bulk[1]",
        "[1] NA\n",
        "> ",
        "# Modifier function",
        "> ",
        "Modifier <- function(skill) {",
        "+ ",
        "  Modifier <- floor((skill-10)/2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Currency Conversion function",
        "> ",
        "gp_conversion <- function(value, append_GP = FALSE) {",
        "+ ",
        "  if (grepl(\",\", value)) {",
        "+ ",
        "    allCurrencies <- NULL",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl(\", \", value)) {",
        "+ ",
        "      delim <- \", \"",
        "+ ",
        "    } else if (grepl(\",\", value)) {",
        "+ ",
        "      delim <- \",\"",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    allCurrencies <- strsplit(value, delim)[[1]]",
        "+ ",
        "    ",
        "+ ",
        "    number <- 0",
        "+ ",
        "    for (n in allCurrencies){",
        "+ ",
        "      m <- parse_number(n)",
        "+ ",
        "      ",
        "+ ",
        "      if (grepl('gp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m",
        "+ ",
        "      } else if (grepl('sp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/10",
        "+ ",
        "      } else if (grepl('cp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/100",
        "+ ",
        "      } else if (grepl('pp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m*10",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  } else {",
        "+ ",
        "    number <- parse_number(value)",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl('sp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/10",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/100",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number*10",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (append_GP) {",
        "+ ",
        "    gp_conversion <- paste(number,\"gp\", sep =\" \")",
        "+ ",
        "  } else {",
        "+ ",
        "    gp_conversion <- number",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "seed <- Sys.time()",
        "> ",
        "",
        "> ",
        "Ancestries <- tibble(read.csv(\"Ancestries.csv\")) %>% filter(Level.0.Character.Override != \"Unavailable\")",
        "> ",
        "Backgrounds <- tibble(read.csv(\"Backgrounds.csv\")) %>% filter(RarityOverride != \"Unavailable\")",
        "> ",
        "simpleWeapons <- tibble(read.csv(\"simple_weapons.csv\")) %>% filter(Available == \"TRUE\")",
        "> ",
        "adventuringGear <- tibble(read.csv(\"adventuring_gear.csv\")) %>% filter(Available == \"TRUE\") %>% mutate(Bulk = replace(Bulk, Bulk == \"\",0)) %>% mutate(Bulk = replace(Bulk, Bulk == \"L\",0)) %>% mutate(Bulk = replace_na(Bulk,0)) %>% mutate(Bulk = as.integer(Bulk) )%>% mutate(Price = replace(Price, Price == \"\",0))",
        "> ",
        "mutate(adventuringGear, Bulk = replace_na(Bulk,0))",
        "\u001B[38;5;246m# A tibble: 68 × 11\u001B[39m\n   Name          Link       Source Rarity Trait Level Price  Bulk Usage Spoilers Available\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<lgl>\u001B[39m\u001B[23m    \n\u001B[38;5;250m 1\u001B[39m Backpack      https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 1 sp      0 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n",
        "\u001B[38;5;250m 2\u001B[39m Bedroll       https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 2 cp      0 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n\u001B[38;5;250m 3\u001B[39m Blocks        https://2… Grand… Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 1 sp      0 \u001B[38;5;246m\"\u001B[39mhel… \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n\u001B[38;5;250m 4\u001B[39m Buoyancy Vest https://2… PFS G… Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 5 gp      1 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n",
        "\u001B[38;5;250m 5\u001B[39m Caltrops      https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 3 sp      0 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n\u001B[38;5;250m 6\u001B[39m Candle        https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 1 cp      0 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n\u001B[38;5;250m 7\u001B[39m Chain         https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 4 gp…     1 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n",
        "\u001B[38;5;250m 8\u001B[39m Chalk         https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 1 cp…     0 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n\u001B[38;5;250m 9\u001B[39m Clay          https://2… Grand… Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 1 cp      0 \u001B[38;5;246m\"\u001B[39mhel… \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n\u001B[38;5;250m10\u001B[39m Climbing Kit  https://2… Core … Common \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m        0 5 sp      1 \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m    \u001B[38;5;246m\"\u001B[39m\u001B[38;5;246m\"\u001B[39m       TRUE     \n",
        "\u001B[38;5;246m# ℹ 58 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "adventuringGear<-mutate(adventuringGear, Bulk = replace_na(Bulk,0))",
        "> ",
        "# Modifier function",
        "> ",
        "Modifier <- function(skill) {",
        "+ ",
        "  Modifier <- floor((skill-10)/2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Currency Conversion function",
        "> ",
        "gp_conversion <- function(value, append_GP = FALSE) {",
        "+ ",
        "  if (grepl(\",\", value)) {",
        "+ ",
        "    allCurrencies <- NULL",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl(\", \", value)) {",
        "+ ",
        "      delim <- \", \"",
        "+ ",
        "    } else if (grepl(\",\", value)) {",
        "+ ",
        "      delim <- \",\"",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    allCurrencies <- strsplit(value, delim)[[1]]",
        "+ ",
        "    ",
        "+ ",
        "    number <- 0",
        "+ ",
        "    for (n in allCurrencies){",
        "+ ",
        "      m <- parse_number(n)",
        "+ ",
        "      ",
        "+ ",
        "      if (grepl('gp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m",
        "+ ",
        "      } else if (grepl('sp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/10",
        "+ ",
        "      } else if (grepl('cp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/100",
        "+ ",
        "      } else if (grepl('pp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m*10",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  } else {",
        "+ ",
        "    number <- parse_number(value)",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl('sp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/10",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/100",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number*10",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (append_GP) {",
        "+ ",
        "    gp_conversion <- paste(number,\"gp\", sep =\" \")",
        "+ ",
        "  } else {",
        "+ ",
        "    gp_conversion <- number",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "seed <- Sys.time()",
        "> ",
        "",
        "> ",
        "Ancestries <- tibble(read.csv(\"Ancestries.csv\")) %>% filter(Level.0.Character.Override != \"Unavailable\")",
        "> ",
        "Backgrounds <- tibble(read.csv(\"Backgrounds.csv\")) %>% filter(RarityOverride != \"Unavailable\")",
        "> ",
        "simpleWeapons <- tibble(read.csv(\"simple_weapons.csv\")) %>% filter(Available == \"TRUE\")",
        "> ",
        "adventuringGear <- tibble(read.csv(\"adventuring_gear.csv\")) %>% filter(Available == \"TRUE\") %>% mutate(Bulk = replace(Bulk, Bulk == \"\",0)) %>% mutate(Bulk = replace(Bulk, Bulk == \"L\",0)) %>% mutate(Bulk = replace_na(Bulk,0)) %>% mutate(Price = replace(Price, Price == \"\",0))",
        "> ",
        "# Modifier function",
        "> ",
        "Modifier <- function(skill) {",
        "+ ",
        "  Modifier <- floor((skill-10)/2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Currency Conversion function",
        "> ",
        "gp_conversion <- function(value, append_GP = FALSE) {",
        "+ ",
        "  if (grepl(\",\", value)) {",
        "+ ",
        "    allCurrencies <- NULL",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl(\", \", value)) {",
        "+ ",
        "      delim <- \", \"",
        "+ ",
        "    } else if (grepl(\",\", value)) {",
        "+ ",
        "      delim <- \",\"",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    allCurrencies <- strsplit(value, delim)[[1]]",
        "+ ",
        "    ",
        "+ ",
        "    number <- 0",
        "+ ",
        "    for (n in allCurrencies){",
        "+ ",
        "      m <- parse_number(n)",
        "+ ",
        "      ",
        "+ ",
        "      if (grepl('gp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m",
        "+ ",
        "      } else if (grepl('sp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/10",
        "+ ",
        "      } else if (grepl('cp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m/100",
        "+ ",
        "      } else if (grepl('pp', n,ignore.case = TRUE)) {",
        "+ ",
        "        number <- number + m*10",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  } else {",
        "+ ",
        "    number <- parse_number(value)",
        "+ ",
        "    ",
        "+ ",
        "    if (grepl('sp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/10",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number/100",
        "+ ",
        "    } else if (grepl('cp', value,ignore.case = TRUE)) {",
        "+ ",
        "      number <- number*10",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (append_GP) {",
        "+ ",
        "    gp_conversion <- paste(number,\"gp\", sep =\" \")",
        "+ ",
        "  } else {",
        "+ ",
        "    gp_conversion <- number",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "seed <- Sys.time()",
        "> ",
        "",
        "> ",
        "Ancestries <- tibble(read.csv(\"Ancestries.csv\")) %>% filter(Level.0.Character.Override != \"Unavailable\")",
        "> ",
        "Backgrounds <- tibble(read.csv(\"Backgrounds.csv\")) %>% filter(RarityOverride != \"Unavailable\")",
        "> ",
        "simpleWeapons <- tibble(read.csv(\"simple_weapons.csv\")) %>% filter(Available == \"TRUE\")",
        "> ",
        "adventuringGear <- tibble(read.csv(\"adventuring_gear.csv\")) %>% filter(Available == \"TRUE\") %>% mutate(Bulk = replace(Bulk, Bulk == \"\",0)) %>% mutate(Bulk = replace(Bulk, Bulk == \"L\",0)) %>% mutate(Bulk = as.integer(Bulk)) %>% mutate(Bulk = replace_na(Bulk,0)) %>% mutate(Price = replace(Price, Price == \"\",0))",
        "> ",
        "if (weapon$Bulk !='L') {",
        "+ ",
        "  currentBulk <- weapon$Bulk",
        "+ ",
        "} else {",
        "+ ",
        "  currentBulk <- 0",
        "+ ",
        "}",
        "> ",
        "maxBulk <- Bonus$Strength + 5",
        "> ",
        "",
        "> ",
        "goldRemaining <- 5",
        "> ",
        "",
        "> ",
        "if (weapon$Price != \"\") {",
        "+ ",
        "  goldRemaining <- 5 - gp_conversion(weapon$Price)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "equipment <- sample_n(adventuringGear, 1)",
        "> ",
        "i <- 0",
        "> ",
        "repeat {",
        "+ ",
        "  nequip <- sample_n(adventuringGear, 1)",
        "+ ",
        "  ",
        "+ ",
        "  #gold check",
        "+ ",
        "  gp <- gp_conversion(nequip$Price)",
        "+ ",
        "  ",
        "+ ",
        "  if (goldRemaining - gp <= 0) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #bulk Check",
        "+ ",
        "  if (currentBulk + nequip$Bulk[1] > maxBulk) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # True up",
        "+ ",
        "  goldRemaining <- goldRemaining - gp",
        "+ ",
        "  currentBulk <- currentBulk + nequip$Bulk[1]",
        "+ ",
        "  equipment <- add_row(equipment, nequip)",
        "+ ",
        "  ",
        "+ ",
        "  if (currentBulk > maxBulk | i > 100) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  i=i+1",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "if (weapon$Bulk !='L') {",
        "+ ",
        "  currentBulk <- weapon$Bulk",
        "+ ",
        "} else {",
        "+ ",
        "  currentBulk <- 0",
        "+ ",
        "}",
        "> ",
        "maxBulk <- Bonus$Strength + 5",
        "> ",
        "",
        "> ",
        "goldRemaining <- 5",
        "> ",
        "",
        "> ",
        "if (weapon$Price != \"\") {",
        "+ ",
        "  goldRemaining <- 5 - gp_conversion(weapon$Price)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "equipment <- sample_n(adventuringGear, 1)",
        "> ",
        "i <- 0",
        "> ",
        "repeat {",
        "+ ",
        "  nequip <- sample_n(adventuringGear, 1)",
        "+ ",
        "  ",
        "+ ",
        "  #gold check",
        "+ ",
        "  gp <- gp_conversion(nequip$Price)",
        "+ ",
        "  ",
        "+ ",
        "  if (goldRemaining - gp <= 0) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #bulk Check",
        "+ ",
        "  if (currentBulk + nequip$Bulk[1] > maxBulk) {",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # True up",
        "+ ",
        "  goldRemaining <- goldRemaining - gp",
        "+ ",
        "  currentBulk <- currentBulk + nequip$Bulk[1]",
        "+ ",
        "  equipment <- add_row(equipment, nequip)",
        "+ ",
        "  ",
        "+ ",
        "  if (currentBulk > maxBulk | i > 100) {",
        "+ ",
        "    break",
        "+ ",
        "  }",
        "+ ",
        "  i=i+1",
        "+ ",
        "}",
        "\nRestarting R session...\n\n"
    ]
}